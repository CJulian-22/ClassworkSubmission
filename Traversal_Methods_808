public class Traversal_Methods_808
{
	/**
	 * 1 findHighestInt method find the highest int value in the array
	 * @param arr, the integer array being checked
	 * @return the highest value of the array
	 */
	public static int findHighestInt (int[] arr)
	{
		int highest = arr[0]; //declare integer, name highest, to store the highest integer value in the array,
		// hold the first integer value of the array
		int traverser; //declare integer, named traverser, to traverse the array
		
		for (traverser = 1; traverser < arr.length; traverser++) //for loop, which set traverser to 1
			//increments it until it is not less than the length of the array, to traverse the array
		{
			if (arr[traverser] > highest) //if statement to check if the current integer element is both not equal to and greater than the highest value
			{
				highest = arr[traverser]; //change value of highest to current integer element if it is greater than the highest value
			}
		}
		return highest; //return highest value
	}
	/**
	 * 2 findDoubleAverage method: finds the average value of the double values
	 * @param arr, the double array being checked
	 * @return the average double value
	 */
	public static double findDoubleAverage (double[] arr)
	{
		double sum = 0; //declare double, named sum
		int traverser; //declare integer, named traverser
		for (traverser = 0; traverser < arr.length; traverser++) //for loop, sets traverser to 0 and increments it until it is not
			//less than the length, to traverse the array
		{
			sum += arr[traverser]; //adds the current double element to the sum
		}
		return sum / arr.length; //return average double value, which is the sum divided by the length
	}
	/**
	 * 3 checkForAnyEvenNums method: checks if an integer array has any even values
	 * @param arr, the integer array being checked
	 * @return whether or not there is an even value in the array
	 */
	public static boolean checkForAnyEvenNums (int[] arr)
	{
		int traverser; //declare integer, named traverser, to traverse the array
		for (traverser = 0; traverser < arr.length; traverser++) //for loop, which set traverser to 0 and increments < length of the array,
			//to traverse the array
		{
			if (arr[traverser] % 2 == 0) //if by checking if it is divisible by 2
			{
				return true; //return true if even
			}
		}
		return false; //return false if none int are even
	}
	/**
	 * 4 checkForAllEvens method: checks if an int array has all even values
	 * @param arr, the integer array being checked
	 * @return whether or not all values in an array are even
	 */
	public static boolean checkForAllEvenNums (int[] arr)
	{
		int traverser; //declare integer, named traverser, to traverse the array
		for (traverser = 0; traverser < arr.length; traverser++) //for loop, which sets traverser to 0 and increments it until
			//it is not less than the length of the array, to traverse the array
		{
			if (arr[traverser] % 2 != 0) //if statement to check if the current integer element is odd, by checking if it is not divisible by 2
			{
				return false; //return true if the current integer value is odd
			}
		}
		return true; //return false if all of the integer values are even (none were odd when checked)
	}
	/**
	 * 5. checkForThreeConsecutiveEquals method: checks if three consecutive, equal double values appear in a double array
	 * @param arr, the double array being checked
	 * @return whether or not there are three consecutive, equal values
	 */
	public static boolean checkForThreeConsecutiveEquals (double[] arr)
	{
		int traverser; //declare integer, named traverser, to traverse the array
		for (traverser = 2; traverser < arr.length; traverser++) //for loop, which sets traverser to 2 and increments not < the length of the array
		{
			if (arr[traverser] == arr[traverser-1] && arr[traverser] == arr[traverser-2]) //if statement to check if the current double value is equal to the previous two values
			{
				return true; //returns true if equal to 2 previous nums
			}
		}
		return false;
	}
}
